// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using coreProject.Models;

namespace coreProject.Migrations
{
    [DbContext(typeof(EventHubContext))]
    partial class EventHubContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("coreProject.Models.BookingMedia", b =>
                {
                    b.Property<int>("BId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("b_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(50);

                    b.Property<int?>("CompanyId")
                        .HasColumnName("companyID");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnName("eventDate")
                        .HasColumnType("date");

                    b.Property<int?>("NoOfDays")
                        .HasColumnName("noOfDays");

                    b.Property<int?>("Packege")
                        .HasColumnName("packege");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(50);

                    b.Property<string>("PrefferedTime")
                        .HasColumnName("prefferedTime")
                        .HasMaxLength(50);

                    b.Property<string>("ReviewToCutomer")
                        .HasColumnName("reviewToCutomer")
                        .IsUnicode(false);

                    b.Property<string>("ReviewToOwner")
                        .HasColumnName("reviewToOwner")
                        .IsUnicode(false);

                    b.Property<int?>("StarToCustomer")
                        .HasColumnName("starToCustomer");

                    b.Property<int?>("StarToOwner")
                        .HasColumnName("starToOwner");

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<int?>("UId")
                        .HasColumnName("U_id");

                    b.Property<string>("UserEmail")
                        .HasColumnName("userEmail")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .HasColumnName("userName")
                        .HasMaxLength(50);

                    b.HasKey("BId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UId");

                    b.ToTable("BookingMedia");
                });

            modelBuilder.Entity("coreProject.Models.Bookings", b =>
                {
                    b.Property<int>("BId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("b_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(20);

                    b.Property<int?>("CompanyId")
                        .HasColumnName("companyID");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnName("eventDate")
                        .HasColumnType("date");

                    b.Property<int?>("NoOfGuests")
                        .HasColumnName("noOfGuests");

                    b.Property<int?>("Packege")
                        .HasColumnName("packege");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(20);

                    b.Property<string>("PrefferedTime")
                        .HasColumnName("prefferedTime")
                        .HasMaxLength(10);

                    b.Property<string>("ReviewToCutomer")
                        .HasColumnName("reviewToCutomer")
                        .IsUnicode(false);

                    b.Property<string>("ReviewToOwner")
                        .HasColumnName("reviewToOwner")
                        .IsUnicode(false);

                    b.Property<int?>("StarToCustomer")
                        .HasColumnName("starToCustomer");

                    b.Property<int?>("StarToOwner")
                        .HasColumnName("starToOwner");

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<int?>("UId")
                        .HasColumnName("U_id");

                    b.Property<string>("UserEmail")
                        .HasColumnName("userEmail")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .HasColumnName("userName")
                        .HasMaxLength(50);

                    b.HasKey("BId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("coreProject.Models.Caterer", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("companyID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AirCondition")
                        .HasColumnName("airCondition");

                    b.Property<bool?>("BridalRoom")
                        .HasColumnName("bridalRoom");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(50);

                    b.Property<bool?>("Cooking")
                        .HasColumnName("cooking");

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasMaxLength(50);

                    b.Property<bool?>("Decoration")
                        .HasColumnName("decoration");

                    b.Property<bool?>("Dj")
                        .HasColumnName("dj");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(50);

                    b.Property<bool?>("Generator")
                        .HasColumnName("generator");

                    b.Property<bool?>("Heater")
                        .HasColumnName("heater");

                    b.Property<int?>("HouseNo")
                        .HasColumnName("houseNo");

                    b.Property<bool?>("Lights")
                        .HasColumnName("lights");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<bool?>("ServingStaff")
                        .HasColumnName("servingStaff");

                    b.Property<bool?>("StageDecorations")
                        .HasColumnName("stageDecorations");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("startDate")
                        .HasColumnType("date");

                    b.Property<int?>("StreetNo")
                        .HasColumnName("streetNo");

                    b.Property<bool?>("Tent")
                        .HasColumnName("tent");

                    b.Property<TimeSpan?>("TotalTime")
                        .HasColumnName("totalTime");

                    b.Property<string>("TownName")
                        .HasColumnName("townName")
                        .HasMaxLength(60);

                    b.Property<int?>("UId")
                        .HasColumnName("U_id");

                    b.Property<bool?>("ValetParking")
                        .HasColumnName("valetParking");

                    b.Property<bool?>("Wifi")
                        .HasColumnName("wifi");

                    b.HasKey("CompanyId");

                    b.ToTable("Caterer");
                });

            modelBuilder.Entity("coreProject.Models.CatererBooking", b =>
                {
                    b.Property<int>("BId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("b_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(50);

                    b.Property<int?>("CompanyId")
                        .HasColumnName("companyID");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnName("eventDate")
                        .HasColumnType("date");

                    b.Property<int?>("NoOfDays")
                        .HasColumnName("noOfDays");

                    b.Property<int?>("Packege")
                        .HasColumnName("packege");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(50);

                    b.Property<string>("PrefferedTime")
                        .HasColumnName("prefferedTime")
                        .HasMaxLength(50);

                    b.Property<string>("ReviewToCustomer")
                        .HasColumnName("reviewToCustomer")
                        .IsUnicode(false);

                    b.Property<string>("ReviewToOwner")
                        .HasColumnName("reviewToOwner")
                        .IsUnicode(false);

                    b.Property<int?>("StarToCustomer")
                        .HasColumnName("starToCustomer");

                    b.Property<int?>("StarToOwner")
                        .HasColumnName("starToOwner");

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<int?>("UId")
                        .HasColumnName("U_id");

                    b.Property<string>("UserEmail")
                        .HasColumnName("userEmail")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .HasColumnName("userName")
                        .HasMaxLength(50);

                    b.HasKey("BId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UId");

                    b.ToTable("CatererBooking");
                });

            modelBuilder.Entity("coreProject.Models.Check", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Check");
                });

            modelBuilder.Entity("coreProject.Models.Halls", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("companyID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BCapacity")
                        .HasColumnName("b_capacity");

                    b.Property<string>("BMackup")
                        .HasColumnName("b_mackup")
                        .HasMaxLength(10);

                    b.Property<string>("BeefMain")
                        .HasColumnName("beef_main")
                        .HasMaxLength(50);

                    b.Property<int?>("BeefPrice")
                        .HasColumnName("beefPrice");

                    b.Property<string>("BeefRice")
                        .HasColumnName("beef_rice")
                        .HasMaxLength(50);

                    b.Property<string>("BeefStarter")
                        .HasColumnName("beef_starter")
                        .HasMaxLength(50);

                    b.Property<string>("BeefSweet")
                        .HasColumnName("beef_sweet")
                        .HasMaxLength(50);

                    b.Property<string>("ChickenMain")
                        .HasColumnName("chicken_main")
                        .HasMaxLength(50);

                    b.Property<int?>("ChickenPrice")
                        .HasColumnName("chickenPrice");

                    b.Property<string>("ChickenRice")
                        .HasColumnName("chicken_rice")
                        .HasMaxLength(50);

                    b.Property<string>("ChickenStarter")
                        .HasColumnName("chicken_starter")
                        .HasMaxLength(50);

                    b.Property<string>("ChickenSweet")
                        .HasColumnName("chicken_sweet")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasMaxLength(50);

                    b.Property<string>("Dj")
                        .HasColumnName("dj")
                        .HasMaxLength(10);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(50);

                    b.Property<int?>("HouseNo")
                        .HasColumnName("houseNo");

                    b.Property<string>("MuttonMain")
                        .HasColumnName("mutton_main")
                        .HasMaxLength(50);

                    b.Property<int?>("MuttonPrice")
                        .HasColumnName("muttonPrice");

                    b.Property<string>("MuttonRice")
                        .HasColumnName("mutton_rice")
                        .HasMaxLength(50);

                    b.Property<string>("MuttonStarter")
                        .HasColumnName("mutton_starter")
                        .HasMaxLength(50);

                    b.Property<string>("MuttonSweet")
                        .HasColumnName("mutton_sweet")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("PCapacity")
                        .HasColumnName("p_capacity");

                    b.Property<int?>("PricePerHead")
                        .HasColumnName("price_per_head");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("startDate")
                        .HasColumnType("date");

                    b.Property<int?>("StreetNo")
                        .HasColumnName("streetNo");

                    b.Property<TimeSpan?>("TotalTime")
                        .HasColumnName("totalTime");

                    b.Property<string>("TownName")
                        .HasColumnName("townName")
                        .HasMaxLength(50);

                    b.Property<int?>("UId")
                        .HasColumnName("U_id");

                    b.Property<string>("Wifi")
                        .HasColumnName("wifi")
                        .HasMaxLength(10);

                    b.HasKey("CompanyId");

                    b.HasIndex("UId");

                    b.ToTable("halls");
                });

            modelBuilder.Entity("coreProject.Models.Media", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("companyID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlbumOne");

                    b.Property<int?>("AlbumThree");

                    b.Property<int?>("AlbumTwo");

                    b.Property<bool?>("Albums")
                        .HasColumnName("albums");

                    b.Property<int?>("CamsOne");

                    b.Property<int?>("CamsThree");

                    b.Property<int?>("CamsTwo");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasMaxLength(50);

                    b.Property<bool?>("DroneCamera")
                        .HasColumnName("droneCamera");

                    b.Property<int?>("DroneOne");

                    b.Property<int?>("DroneThree");

                    b.Property<int?>("DroneTwo");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(50);

                    b.Property<bool?>("FilmGraphy")
                        .HasColumnName("filmGraphy");

                    b.Property<bool?>("HdCam")
                        .HasColumnName("hdCam");

                    b.Property<int?>("HouseNo")
                        .HasColumnName("houseNo");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("NoOfCams")
                        .HasColumnName("noOfCams");

                    b.Property<bool?>("PhotoGraphy")
                        .HasColumnName("photoGraphy");

                    b.Property<int?>("PriceOne");

                    b.Property<int?>("PriceThree");

                    b.Property<int?>("PriceTwo");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("startDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("StreetNo")
                        .HasColumnName("streetNo");

                    b.Property<TimeSpan?>("TotalTime")
                        .HasColumnName("totalTime");

                    b.Property<string>("TownName")
                        .HasColumnName("townName")
                        .HasMaxLength(50);

                    b.Property<int?>("UId")
                        .HasColumnName("U_id");

                    b.HasKey("CompanyId");

                    b.HasIndex("UId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("coreProject.Models.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Seller");
                });

            modelBuilder.Entity("coreProject.Models.Users", b =>
                {
                    b.Property<int>("UId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("U_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasMaxLength(50);

                    b.Property<int?>("UType")
                        .HasColumnName("U_type");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.HasKey("UId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("coreProject.Models.BookingMedia", b =>
                {
                    b.HasOne("coreProject.Models.Media", "Company")
                        .WithMany("BookingMedia")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_BookingMedia_Media");

                    b.HasOne("coreProject.Models.Users", "U")
                        .WithMany("BookingMedia")
                        .HasForeignKey("UId")
                        .HasConstraintName("FK_BookingMedia_Users");
                });

            modelBuilder.Entity("coreProject.Models.Bookings", b =>
                {
                    b.HasOne("coreProject.Models.Halls", "Company")
                        .WithMany("Bookings")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Bookings_halls");

                    b.HasOne("coreProject.Models.Users", "U")
                        .WithMany("Bookings")
                        .HasForeignKey("UId")
                        .HasConstraintName("FK_Bookings_Users");
                });

            modelBuilder.Entity("coreProject.Models.CatererBooking", b =>
                {
                    b.HasOne("coreProject.Models.Caterer", "Company")
                        .WithMany("CatererBooking")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CatererBooking_Caterer");

                    b.HasOne("coreProject.Models.Users", "U")
                        .WithMany("CatererBooking")
                        .HasForeignKey("UId")
                        .HasConstraintName("FK_CatererBooking_Users");
                });

            modelBuilder.Entity("coreProject.Models.Halls", b =>
                {
                    b.HasOne("coreProject.Models.Users", "U")
                        .WithMany("Halls")
                        .HasForeignKey("UId")
                        .HasConstraintName("FK_halls_Users");
                });

            modelBuilder.Entity("coreProject.Models.Media", b =>
                {
                    b.HasOne("coreProject.Models.Users", "U")
                        .WithMany("Media")
                        .HasForeignKey("UId")
                        .HasConstraintName("FK_Media_Users");
                });
#pragma warning restore 612, 618
        }
    }
}
